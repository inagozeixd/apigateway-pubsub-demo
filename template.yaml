AWSTemplateFormatVersion: '2010-09-09'
Description: 'API Gateway to SNS to SQS to Lambda serverless pattern'

Parameters:
  MyName:
    Type: String
    Default: myname
  Environment:
    Type: String
    Default: dev
    Description: Environment name

Resources:
  # SNS Topic
  MessageTopic1:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${Environment}-message-topic1"

  # SNS Topic
  MessageTopic2:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${Environment}-message-topic2"

  # SNS Subscription to SQS
  MessageTopicSubscription1:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn: !Ref MessageTopic1
      Endpoint: !GetAtt MessageQueue1.Arn
      FilterPolicyScope: MessageAttributes
      # NOTE: https://docs.aws.amazon.com/ja_jp/sns/latest/dg/message-filtering-apply.html
      # NOTE: https://docs.aws.amazon.com/sns/latest/dg/example-filter-policies.html
      FilterPolicy: |
        {
          "message-type": ["queue1"]
        }

  # SNS Subscription to SQS
  MessageTopicSubscription2:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn: !Ref MessageTopic1
      Endpoint: !GetAtt MessageQueue2.Arn
      FilterPolicyScope: MessageAttributes
      FilterPolicy: |
        {
          "message-type": ["queue2"]
        }

  # SNS Subscription to SQS
  MessageTopicSubscription3:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn: !Ref MessageTopic2
      Endpoint: !GetAtt MessageQueue3.Arn

  # SQS Queue
  MessageQueue1:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-message-queue1"

  # SQS Queue
  MessageQueue2:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-message-queue2"

  # SQS Queue
  MessageQueue3:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-message-queue3"

  # SQS Queue Policy
  MessageQueuePolicy1:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref MessageQueue1
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: !GetAtt MessageQueue1.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref MessageTopic1

  # SQS Queue Policy
  MessageQueuePolicy2:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref MessageQueue2
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: !GetAtt MessageQueue2.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref MessageTopic1

  # SQS Queue Policy
  MessageQueuePolicy3:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref MessageQueue3
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: !GetAtt MessageQueue3.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref MessageTopic2

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-lambda-execution-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SQSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt MessageQueue1.Arn
                  - !GetAtt MessageQueue2.Arn
                  - !GetAtt MessageQueue3.Arn

  # API Gateway Execution Role
  ApiGatewayExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-apigateway-execution-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SNSPublishPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref MessageTopic1
                  - !Ref MessageTopic2
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  # Lambda Function
  MessageFunction1:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Environment}-pubsub-demo1"
      Runtime: nodejs22.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          module.exports.handler = (event, context) => {
            console.log('event1', event)
          }

  # Lambda Function
  MessageFunction2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Environment}-pubsub-demo2"
      Runtime: nodejs22.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          module.exports.handler = (event, context) => {
            console.log('event2', event)
          }

  # Lambda Function
  MessageFunction3:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Environment}-pubsub-demo3"
      Runtime: nodejs22.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          module.exports.handler = (event, context) => {
            console.log('event3', event)
          }

  # Lambda Event Source Mapping
  LambdaEventSourceMapping1:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt MessageQueue1.Arn
      FunctionName: !Ref MessageFunction1

  # Lambda Event Source Mapping
  LambdaEventSourceMapping2:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt MessageQueue2.Arn
      FunctionName: !Ref MessageFunction2

  # Lambda Event Source Mapping
  LambdaEventSourceMapping3:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt MessageQueue3.Arn
      FunctionName: !Ref MessageFunction3

  # API Gateway Rest API
  MessageApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${Environment}-message-api"
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource
  MessageResource1:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MessageApi
      ParentId: !GetAtt MessageApi.RootResourceId
      PathPart: message1

  # API Gateway Method
  PostMessageMethod1:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MessageApi
      ResourceId: !Ref MessageResource1
      HttpMethod: POST
      AuthorizationType: NONE
      RequestParameters:
        method.request.header.Content-Type: false
      # NOTE: https://www.alexdebrie.com/posts/aws-api-gateway-service-proxy/#using-an-api-gateway-service-proxy-integration-to-sns
      # NOTE: https://medium.com/@gmalaguti/aws-api-gateway-integration-treks-sns-d47543cb0413
      Integration:
        Type: AWS
        # EC2にはPOSTと明示されているが、SNSでは明文化されない模様
        # NOTE: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:sns:action/Publish"
        Credentials: !GetAtt ApiGatewayExecutionRole.Arn
        PassthroughBehavior: NEVER
        # NOTE: https://docs.aws.amazon.com/apigateway/latest/developerguide/rest-api-parameter-mapping-sources.html
        RequestParameters:
          integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
        RequestTemplates:
          # NOTE: https://docs.aws.amazon.com/sns/latest/api/API_Publish.html
          # NOTE: https://docs.aws.amazon.com/sns/latest/api/API_MessageAttributeValue.html
          # NOTE: https://docs.aws.amazon.com/sns/latest/api/API_Publish.html#API_Publish_Examples
          # NOTE: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#util-template-reference
          application/json: !Sub |
            #set($messageType = $input.path('$.message'))
            Action=Publish&TopicArn=${MessageTopic1}&Message=$util.urlEncode($input.body)&MessageAttributes.entry.1.Name=message-type&MessageAttributes.entry.1.Value.DataType=String&MessageAttributes.entry.1.Value.StringValue=$util.urlEncode($messageType)
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: "2\\d{2}"
            ResponseTemplates:
              application/json: |
                {
                  "messageId": "$input.path('$.PublishResponse.PublishResult.MessageId')",
                  "status": "Message sent successfully"
                }
      #     - StatusCode: 400
      #       SelectionPattern: "4\\d{2}"
      #       ResponseTemplates:
      #         application/json: |
      #           {
      #             "error": "Bad Request",
      #             "message": "Invalid request format"
      #           }
      #     - StatusCode: 500
      #       SelectionPattern: "5\\d{2}"
      #       ResponseTemplates:
      #         application/json: |
      #           {
      #             "error": "Internal Server Error",
      #             "message": "Failed to process message"
      #           }
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
      #   - StatusCode: 400
      #     ResponseModels:
      #       application/json: Empty
      #   - StatusCode: 500
      #     ResponseModels:
      #       application/json: Empty

  # API Gateway Resource
  MessageResource2:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MessageApi
      ParentId: !GetAtt MessageApi.RootResourceId
      PathPart: message2

  # API Gateway Method
  PostMessageMethod2:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MessageApi
      ResourceId: !Ref MessageResource2
      HttpMethod: POST
      AuthorizationType: NONE
      RequestParameters:
        method.request.header.Content-Type: false
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:sns:action/Publish"
        Credentials: !GetAtt ApiGatewayExecutionRole.Arn
        PassthroughBehavior: NEVER
        RequestParameters:
          integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
        RequestTemplates:
          application/json: !Sub |
            #set($message = $input.path('$.message'))
            Action=Publish&TopicArn=${MessageTopic2}&Message=$util.urlEncode($message)
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: "2\\d{2}"
            ResponseTemplates:
              application/json: |
                {
                  "messageId": "$input.path('$.PublishResponse.PublishResult.MessageId')",
                  "status": "Message sent successfully"
                }
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref MessageApi
      StageName: !Ref Environment
    DependsOn:
      - PostMessageMethod1
      - PostMessageMethod2

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${MessageApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/message"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"